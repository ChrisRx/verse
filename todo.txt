TODO
====

- "unwise" cast to silence compiler error
- Range of numbers iterable
- Multiple return values
- Methods
  - "static" struct (/type) methods
- Const!
- Const members in struct
- Overhaul errors
  - Error reporting on imported package
  - Better error message for checking polymorphic function arg types
- Change backend
- Types:
  - tuple?
  - union?
- Allow types (int, u8, string) to be used
  as identifiers? i.e.:
    t := #typeof(x);
    if t == int {
        // ...
    }

Things to fix:
  - Make owned reference not initialize automatically
  - Returning a string as Any causes it to not be copied
  - See print_test, converting a reference to Any is acting strange
  - Use on polymorphic types? Should this be allowed? It is weird.
  - Polydef in params of argument type does not carry the definition of "T" to the return value type?
  - "type" identifier is not usable in a struct literal due to lexer
  - float literal should default to float64 if not constrained?
  - spread on array literal
  - Global vars in different packages may be referred to prior to initialization!
    Decide whether this is okay, and possibly change the order that init code is
    generated in (i.e. most nested import first?)
  - Change the way "expect" works in the parser
